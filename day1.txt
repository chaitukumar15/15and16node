1. 3 tier archi -> 
2. where node falls in this 
3. why node is imp 
4. how node js is build 
5. node js working vs js working 


m-1 :
modules .
global vs modular context 
user defined modules 
pre defined modules (core modules)
http - module 
apis creation 


3 tier architecture
application -> 
collection of programming languages 

req ---> application logic --> res

device -
ram rom in memory os 

compilers -> human lan to machine lan 
compilers -> pro lan

stand alone app -> no need of internet 


address 

http://ip:port/path


fe  -> data display , data collection (browser)

be - > creating logics (server)
 
db  -> data store /manipulate 


https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Suriya_at_68th_national_film_awards.JPG/440px-Suriya_at_68th_national_film_awards.JPG



non blocking I/o
asynchronous
even driven archi

C:\Users\cheym\OneDrive\documents\zoom\2024-11-12 08.04.32 15r & 16r node js


.....................................day2..................................


node - an env which is used to run js out of browser 

. modules -> 

es6 modules ->

modules  ->  export , import 

module.exports=j

var j=require("./filepath")


..................day 3.................

globular context vs modular context :


global -> 


console.log(__dirname);

console.log(__filename);

http module -> 
used to create a web server -->accept  req send res 

2 methods

var http= require("http");

var server=createserver((req,res)=>{

res.write("chunks");

chunks-  should be a string

})
port=3000;
server.listen(port,()=>{

})

even emitter 

event listener

event handler


crud ->

task ->

1. create an api -> send the res as 

chaitanya
studies
coll
branch

2.create an api which sends res as fakestore api data 
 [{
    "id": 1,
    "title": "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops",
    "price": 109.95,
    "description": "Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday",
    "category": "men's clothing",
    "image": "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg",
    "rating": {
      "rate": 3.9,
      "count": 120
    }
  },
  {
    "id": 2,
    "title": "Mens Casual Premium Slim Fit T-Shirts ",
    "price": 22.3,
    "description": "Slim-fitting style, contrast raglan long sleeve, three-button henley placket, light weight & soft fabric for breathable and comfortable wearing. And Solid stitched shirts with round neck made for durability and a great fit for casual fashion wear and diehard baseball fans. The Henley style round neckline includes a three-button placket.",
    "category": "men's clothing",
    "image": "https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg",
    "rating": {
      "rate": 4.1,
      "count": 259
    }
  },
  {
    "id": 3,
    "title": "Mens Cotton Jacket",
    "price": 55.99,
    "description": "great outerwear jackets for Spring/Autumn/Winter, suitable for many occasions, such as working, hiking, camping, mountain/rock climbing, cycling, traveling or other outdoors. Good gift choice for you or your family member. A warm hearted love to Father, husband or son in this thanksgiving or Christmas Day.",
    "category": "men's clothing",
    "image": "https://fakestoreapi.com/img/71li-ujtlUL._AC_UX679_.jpg",
    "rating": {
      "rate": 4.7,
      "count": 500
    }
  }]


........................................day4...............................

crud ->

c-create  - post 
read -r     get
update -u   put , patch 
delete-d    delete 

req.method

req.url

params  ->
http://localhost:3000/products/1

queary   ->  ?id=10&u=11
http://localhost:3000/products/1?id=10&u=chaitanya
{}

................................day 5....................

query and param -> 
read file ->crud

........ ................day 6.................

async - > callback -> 


read file -> file read -> 

fs.readFile("./index.json", "utf-8", (err, data) => {
  
        console.log(err);
        
      if (err) {
        res.write(JSON.stringify(err.message));
      } else {
        res.write(data);
      }
      res.end();
    });
    \
write file :  to create a file or to override the data in the file 

append file : to append the data to exosting file / to create file if not exist 

unlink -> delete a file 




task 0->  

create a file -> products.json 

it require data -> fakestore data pass 

call the api using fetch 
products.json -> add the data to it 


task 1- 

index.html -> 

read the file and add the conent of that file to index2.html 



1.readfile -> 

2.write -> index1.html -> 



read index2,html and send it as res 

search about method which does this operation 

task 2- 

practice all crud operation in fs system 


...................day 7..........................
what we need to see -> rename , copy , do file exist 



fetch("url",{
  method:"post",
  headers:{
    "content-type":"application/json",
    "authorization":barer token  jwt 
  },
  body:json.s({
    name:"chaitanya"
  })
})



role based login -> 


register -> local storage - stotage -> 

username 
password
conpass 
mail 
flag -> user , admin (select options )

[
  {},{},{}
]


dummyjson-> auth -> jwt 



how to get data -> body -> from client in pure node

var body=""

events -> req.on("data",(chunks)=>{


body+=chunks.toString();


})


req.on("end",()=>{

log-> body


})


http://localhiost:3000/data  -> post
task -> get the body from the user -> 

{name:"h"}

write the content in the file -> 

.........
http://localhiost:3000/data  -> get
read the file and send it as a res 


.........................................

nodemon -> to automate restarting the server 

npm init -y

pacage.json -> will contain the meta data about the project  

1.0.1
1.1.1-> 
2.0.0 -> 
"1--> major update 
.0 -> minor update  
.0 -> patch update ,

node package manager -> 

1.  git maintain
2.  pacages / libraries 
   
   collection of predefined code
    wich is written in function/
     class that can be resuesd 
     and refers to a single fun 


npm install/i pacage ; will install all pacages based on pacage.josn/lock file 



............................................

 dir - directoryy / folder 

create  -> mkdir 

read -> readdir

remove => rm

-->

////  file create ->  


fs.craetefile("D:\raju\ram","data",,"encodedtyoe",(err)=>{

})

////////////////////////

task -> nested mkdir -> 

ravi/raju dont use recursive 

ravi / raju, ram  use recursive 

..............................

rm /  rmdir 

rmdir -> cnt delete dir 


readdir-> [h,in.txt];







rm -> ricursive true 

...............................................

http , fs , url , params , query , req , res ,modules 
path , method


express js ->
light weight framework:


library -> 
framework -> 

how to use it 



install express 


var express=require("express");

var app=express();

// htttp methods ->  

app.get("endpoint",(req,res)=>{

  res.send("hello world")
});


app.listen(port,()=>{

})

.............................................
query , params 

query -> url -> parse  (true)-> query-> object 

..........................................


middle ware 
:

















